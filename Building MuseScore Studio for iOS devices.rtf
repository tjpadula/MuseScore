{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;\red0\green0\blue0;
\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\csgray\c0\c0;\csgray\c0;
\csgenericrgb\c0\c0\c0\c85000;\csgenericrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww11520\viewh19600\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Building MuseScore Studio for iOS devices:\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Sequoia 15.4\
Apple Silicon test machines: Mac Mini 9,1 M1 16GB\
Xcode 16.3 with command line tools and iOS 18.4 SDK\
\
====\
\
These instructions presume you have already successfully built and launched MuseScore Studio in the iOS simulator. Note that building for an iOS device has only been tried on an Apple Silicon machine.\
\
This procedure results in a separate xcodeproj for building for an iOS device as for building for a simulator. This is because we have not yet combined the Qt static-link libraries, which would require a three-way combination for iOS devices, iOS simulator on Apple Silicon, and iOS simulator on x86_64. The plan is to make that function so there is one xcodeproj for both simulator and devices.\
\
\
====\
\

\f1\b Step 1:\
\

\f0\b0 Configure and build Qt6 for iOS devices:\
\
\pard\pardeftab720\partightenfactor0

\f2 \cf2 \cb3 \expnd0\expndtw0\kerning0
cd ~/Code/qt6_complete\
mkdir qt6-build-ios-device-arm64\
cd qt6-build-ios-device-arm64\
\
../configure \\\
-prefix /usr/local/bin \\\
-c++std c++17 \\\
-static \\\
-static-runtime \\\
-debug \\\
-qt-host-path ~/Code/qt6_complete/qt6-build-mac-arm64/qtbase \\\
-DQT_HOST_PATH=~/Code/qt6_complete/qt6-build-mac-arm64/qtbase \\\
-DQT_BUILD_TESTS=OFF \\\
-DQT_BUILD_EXAMPLES=OFF \\\
-DQT_BUILD_EXAMPLES_BY_DEFAULT=OFF \\\
-sdk iphoneos \\\
-appstore-compliant\kerning1\expnd0\expndtw0  \\\
\expnd0\expndtw0\kerning0
-- \\\
-DCMAKE_OSX_ARCHITECTURES="arm64" \\\
-DCMAKE_SYSTEM_NAME=iOS \\\
-DCMAKE_BUILD_TYPE=Debug \\\
-DQT_HOST_PATH=~/Code/qt6_complete/qt6-build-mac-arm64/qtbase \\\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 -DCMAKE_PREFIX_PATH=~/Code/\cf2 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 qt6_complete\cf4 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 /qtbase/cmake:~/Code/\cf2 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 qt6_complete\cf4 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 /qtbase \cf2 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
cmake --build . --parallel 8\
\
\
\pard\pardeftab720\partightenfactor0

\f0 \cf2 ====\
\

\f1\b Step 2:\
\

\f0\b0 Point the iOS device bin and libexec directories at the Mac directories:\
\pard\pardeftab720\partightenfactor0

\f2 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf4 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 cd \cf2 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 ~/Code/qt6_complete/qt6-build-ios-device-arm64/qtbase\
\cf4 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 mv bin bin.hide\
ln -s \cf2 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 ~/Code/qt6_complete/qt6-build-mac-arm64/qtbase\cf4 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 /bin\
mv libexec libexec.hide\
ln -s \cf2 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 ~/Code/qt6_complete/qt6-build-mac-arm64/qtbase\cf4 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 /libexec\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0 \cf4 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
====\
\

\f1\b Step 3:\
\

\f0\b0 Build MSS:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2 cd ~/Code/MuseScoreGit\
cmake -P build.cmake \\\
-G Xcode \\\
-DCMAKE_SYSTEM_NAME=iOS \\\
-DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE=BOTH \\\
-DMUSE_ENABLE_UNIT_TESTS=0 \\\
-DQT_HOST_PATH=~/Code/qt6_complete/qt6-build-mac-arm64/qtbase \\\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
-DMUSE_MODULE_EXTENSIONS=OFF \\\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
-DMUSE_MODULE_AUDIO_IOS=1 \\\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf2 \cb3 \CocoaLigature1 -DCMAKE_BUILD_TYPE=Debug \\\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf2 -DPLATFORM=ARM64 \\\
-D\cf5 \cb6 CMAKE_OSX_ARCHITECTURES=\cf2 "arm64" \\\cb3 \
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
-DCMAKE_XCODE_SCHEME_ENVIRONMENT="ARCHS=arm64" \\\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 -DCMAKE_OSX_SYSROOT=iphoneos\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf0 \CocoaLigature1 \
The build may complete but with an error that there are no iOS App Development provisioning profiles, this is not actually a problem.\
\
\
====\
\

\f1\b Step 4:\
\

\f0\b0 Build and run from Xcode:\
	- open the xcodeproj in 
\f2\fs22 \cf4 \CocoaLigature0 MuseScoreGit/builds/Mac-Qtqt6-build-ios-device-arm64-qtbase-Xcode-Debug
\f0\fs24 \cf0 \CocoaLigature1 \
	- \strike \strikec0 let it auto-create schemes\strike0\striked0  this will happen by itself\
	- set the target to "MuseScoreStudio",\
	- set the MuseScoreStudio developer team in "Signing and Capabilities"\
	- verify the Bundle Identifier is as expected\
	- launch the simulator, open an iPad, and turn it to landscape\
	- in Xcode, select the iPad as a build target\
	- make sure you are building for either "Any iOS Device" or an attached device\
	- build and debug on a real attached device.\
\
If you run into a build failure somewhere in the fonts, be sure you are building for a device, not the simulator.\
}